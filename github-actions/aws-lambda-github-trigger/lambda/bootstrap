#!/usr/bin/env bash
set -euo pipefail

# The base URL for the Runtime API is given to us in an environment variable.
# https://docs.aws.amazon.com/lambda/latest/dg/runtimes-custom.html
AWS_LAMBDA_RUNTIME_API=${AWS_LAMBDA_RUNTIME_API:-"127.0.0.1:9001"}

echo "Starting Custom Runtime bootstrap..." 1>&2

COUNT=0
MAX_RUNS=1  # Change this to allow only one execution

while [[ "$COUNT" -lt "$MAX_RUNS" ]]; do
    COUNT=$((COUNT + 1))
  # 1. Get an event from the Lambda Runtime API
  #    This blocks until an event is available.
  resp_headers=$(mktemp)
  event_data=$(curl --silent --show-error --fail \
      -D "$resp_headers" \
      "http://${AWS_LAMBDA_RUNTIME_API}/2018-06-01/runtime/invocation/next")

  # 2. Parse the request ID from the headers
  request_id="$(grep -Fi Lambda-Runtime-Aws-Request-Id "$resp_headers" | awk '{print $2}' | tr -d '\r')"

  if [[ -z "$request_id" ]]; then
    echo "Error: No request ID found in event. Exiting..." 1>&2
    exit 1
  fi

  echo "Received event with RequestId: $request_id" 1>&2
  echo "Event payload: $event_data" 1>&2

  # 3. Invoke your actual handler code (e.g., run.sh).
  #    We’ll pass the event payload via stdin. If your script needs JSON parsing,
  #    you might want to do it here or inside run.sh.

  set +e
  # You can store the script’s output or just let it go to stderr/log
  ./run.sh "$event_data"
  exit_code=$?
  set -e

  # 4a. If the script succeeded (exit code 0), send a successful response:
  if [[ "$exit_code" -eq 0 ]]; then
    result='{"status":"ok"}'  # minimal JSON, or pass real data from run.sh
    curl --silent --show-error --fail -X POST \
      -H "Content-Type: application/json" \
      -d "$result" \
      "http://${AWS_LAMBDA_RUNTIME_API}/2018-06-01/runtime/invocation/$request_id/response"
    echo "Sent success response for RequestId: $request_id" 1>&2

  # 4b. Otherwise, report an error:
  else
    error_message='{"error":"Script failed"}'
    curl --silent --show-error --fail -X POST \
      -H "Content-Type: application/json" \
      -d "$error_message" \
      "http://${AWS_LAMBDA_RUNTIME_API}/2018-06-01/runtime/invocation/$request_id/error"
    echo "Reported error for RequestId: $request_id" 1>&2
  fi

  rm -f "$resp_headers"
done
#!/usr/bin/env bash
set -euo pipefail

# The base URL for the Runtime API is given to us in an environment variable.
# https://docs.aws.amazon.com/lambda/latest/dg/runtimes-custom.html
AWS_LAMBDA_RUNTIME_API=${AWS_LAMBDA_RUNTIME_API:-"127.0.0.1:9001"}

echo "Starting Custom Runtime bootstrap..." 1>&2

while true; do
  # 1. Get an event from the Lambda Runtime API
  #    This blocks until an event is available.
  resp_headers=$(mktemp)
  event_data=$(curl --silent --show-error --fail \
      -D "$resp_headers" \
      "http://${AWS_LAMBDA_RUNTIME_API}/2018-06-01/runtime/invocation/next")

  # 2. Parse the request ID from the headers
  request_id="$(grep -Fi Lambda-Runtime-Aws-Request-Id "$resp_headers" | awk '{print $2}' | tr -d '\r')"

  if [[ -z "$request_id" ]]; then
    echo "Error: No request ID found in event. Exiting..." 1>&2
    exit 1
  fi

  echo "Received event with RequestId: $request_id" 1>&2
  echo "Event payload: $event_data" 1>&2

  # 3. Invoke your actual handler code (e.g., run.sh).
  #    We’ll pass the event payload via stdin. If your script needs JSON parsing,
  #    you might want to do it here or inside run.sh.

  set +e
  # You can store the script’s output or just let it go to stderr/log
  ./run.sh "$event_data"
  exit_code=$?
  set -e

  # 4a. If the script succeeded (exit code 0), send a successful response:
  if [[ "$exit_code" -eq 0 ]]; then
    result='{"status":"ok"}'  # minimal JSON, or pass real data from run.sh
    curl --silent --show-error --fail -X POST \
      -H "Content-Type: application/json" \
      -d "$result" \
      "http://${AWS_LAMBDA_RUNTIME_API}/2018-06-01/runtime/invocation/$request_id/response"
    echo "Sent success response for RequestId: $request_id" 1>&2

  # 4b. Otherwise, report an error:
  else
    error_message='{"error":"Script failed"}'
    curl --silent --show-error --fail -X POST \
      -H "Content-Type: application/json" \
      -d "$error_message" \
      "http://${AWS_LAMBDA_RUNTIME_API}/2018-06-01/runtime/invocation/$request_id/error"
    echo "Reported error for RequestId: $request_id" 1>&2
  fi

  rm -f "$resp_headers"
done